version: 0.2
phases:
  pre_build:
    commands:
      - echo "Build"
      - echo download files
      - echo login docker
      - echo $DOCKER_TOKEN
      - echo $DOCKER_TOKEN > token.key
      - docker login -u $DOCKER_USER --password-stdin < token.key
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region us-east-2 --no-include-email)
      - REPOSITORY_URI=807354200398.dkr.ecr.us-east-2.amazonaws.com/task-demo
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  install:
    run-as: root
    commands:
      - echo Installing gradle
      - mkdir -p /opt/gradle
      - wget https://services.gradle.org/distributions/gradle-6.8.2-bin.zip
      - unzip -d /opt/gradle gradle-6.8.2-bin.zip
      - export PATH=$PATH:/opt/gradle/gradle-6.8.2/bin
      - /opt/gradle/gradle-6.8.2/bin/gradle -v
  build:
    commands:
      - ls /codebuild/output/*
      - ls $CODEBUILD_SRC_DIR
      - cd image
      - wget https://download.java.net/java/GA/jdk15.0.2/0d1cfde4252546c6931946de8db48ee2/7/GPL/openjdk-15.0.2_linux-x64_bin.tar.gz
      - tar -zxvf openjdk-15.0.2_linux-x64_bin.tar.gz
      - mv jdk-15.0.2 java
      - rm openjdk-15.0.2_linux-x64_bin.tar.gz
      - rm -rf server
      - mkdir server
      - cd ..
      - export JAVA_HOME=$CODEBUILD_SRC_DIR/image/java
      - export PATH=$PATH:$CODEBUILD_SRC_DIR/image/java/bin
      - /opt/gradle/gradle-6.8.2/bin/gradle -v
      - cd server
      - /opt/gradle/gradle-6.8.2/bin/gradle sonarqube
      - /opt/gradle/gradle-6.8.2/bin/gradle bootJar
      - cd ..
      - mv server/build/libs/server-0.0.1.jar image/server/server-0.0.1.jar
      - mv schema image/schema
      - cd image
      - docker build -t $REPOSITORY_URI:latest ./
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - cd ..
      - echo Writing image definitions file...
      - printf '[{"name":"develop","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
artifacts:
  files: imagedefinitions.json