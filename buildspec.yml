version: 0.2
phases:
  pre_build:
    commands:
      - echo "Build"
      - echo download files
      - echo login docker
      - echo $DOCKER_TOKEN
      - echo $DOCKER_TOKEN > token.key
      - docker login -u $DOCKER_USER --password-stdin < token.key
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region us-east-2 --no-include-email)
      - REPOSITORY_URI=807354200398.dkr.ecr.us-east-2.amazonaws.com/task-demo
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  build:
    commands:
      - ls /codebuild/output/*
      - ls $CODEBUILD_SRC_DIR
      - cd build
      - wget https://corretto.aws/downloads/resources/11.0.8.10.1/amazon-corretto-11.0.8.10.1-linux-x64.tar.gz
      - tar -zxvf amazon-corretto-11.0.8.10.1-linux-x64.tar.gz
      - mv amazon-corretto-11.0.8.10.1-linux-x64 java
      - rm amazon-corretto-11.0.8.10.1-linux-x64.tar.gz
      - rm -rf server
      - mkdir server
      - cd ..
      - mvn clean package -Dmaven.test.skip=true -Dhttps.protocols=TLSv1.2
      - rm -rf services/target/classes
      - rm -rf services/target/generated-sources
      - rm -rf services/target/maven-status
      - rm -rf services/target/maven-archiver
      - rm -rf services/target/test-classes
      - mv services/target/* build/server
      - cd build
      - docker build -t $REPOSITORY_URI:latest ./
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - cd ..
      - echo Writing image definitions file...
      - printf '[{"name":"develop","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
artifacts:
  files: imagedefinitions.json